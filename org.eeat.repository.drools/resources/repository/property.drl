package org.eeat.model;

import java.util.Date;
import org.eeat.core.model.*;
import org.eeat.core.model.ocl.*;
import org.eeat.repository.hibernate.*;
import org.eeat.repository.drools.*;
 
global org.eeat.repository.drools.Repository repository;

// Event declarations cannot be Interfaces, but must be Classes
declare EventImpl
	// TODO testing expires...
	@expires (1m)
	@role( event )
	@timestamp( timestamp )	
end
declare ContextVariableImpl
	// TODO testing expires...
	@expires (1m)
	@role( event )
	@timestamp( timestamp )	
end
declare PropertyEventImpl
	// TODO testing expires...
	@expires (1m)
	@role( event )
	@timestamp( timestamp )	
	@propertyChangeSupport
end
declare OclMessageImpl
	// TODO testing expires...
	@expires (1m) // enough time to process?
	@role( event )
	@timestamp( timestamp )	
end

rule "Initialize Global"   
  no-loop  
    when
        (not PropertyEvent(property == "Global"))
    then
       insert(new PropertyEventImpl("Global", 0));
end

/**
If placed in Repositry, then the intialization can cause a thread race,
where Global is added but not committed to DB before a new Session is started.

Place in component rules that have hibernate configuration.
rule "Persist Property"
  when
  	$p: PropertyEvent(satisfied != PropertyEvent.NONFALSE)
  then
  	repository.makePersistent($p);
    // repository.getLog().debug("Persist a property: " + $p);
    // repository.commitTransaction();
end
**/

rule "retract OclMessages"
  // duration should be long enough that all rules have had a chance to process it
  // A duration of about 5 minutes should work well with batch processing because
  // the batch will contain most events. Only those events at batch (window) boundary
  // will be an issue. Larger batch sizes require longer durations.
  // Note that some rules may used two or more OclMessages to activate.
  // In such cases, a short duration will prevent an activation that should occur.
  // 
  duration(5m)
  no-loop
  when
  	$p : OclMessage()
  then
  	retract($p);
end

/**
rule "log stream msg"
  no-loop
  when
  	$p : OclMessage()
  then
  	repository.getLog().info("Event stream: Rule match message: " + $p);
end
**/

/*
rule "log msg"
  no-loop
  when
  	$p : OclMessage()
  then
  	repository.getLog().info($p);
end
*/

/*
rule "log property"
  no-loop
  when
  	$p : PropertyEvent()
  then
  	repository.getLog().info($p);
end
**/

/*
rule "test duration"
  duration (0d 0h 1s)
  salience 200
  when
	$eventually2 : 
	  PropertyEvent(property == "p:talx.model.TransportToolkit:afterEventuallyTimeout_eventually2", satisfied == PropertyEvent.TRUE, $scopeEvent : scopeEvent)
	(not
	  // Properties referenced...
	  $eventually3 : 
	    PropertyEvent( property == "p:talx.model.TransportToolkit:afterEventuallyTimeout_eventually3", satisfied == PropertyEvent.TRUE, scopeEvent == $scopeEvent))    
  then
    System.out.println("duration working.");
end
*/

rule "retract inconsistent PropertyEvent status facts"
	salience 200 
  when
	 $p1 : PropertyEvent($pn1 : property, $s1 : scopeEvent, satisfied == PropertyEvent.NONFALSE, $ts1 : timestamp)
	 $p2 : PropertyEvent(property == $pn1, scopeEvent == $s1, satisfied == PropertyEvent.FALSE, timestamp > $ts1)
	 eval($p1 != $p2)
  then
  	 $p1.setSatisfied(PropertyEvent.FALSE);
  	 retract($p2);
end


/* This applies to properties that check for sets of events.
 * This must not run if the property: (1) check for never(x), (2) between(x,y)
 */ 
 /*
rule "property closing invalidates conjunctive properties"
  no-loop 
  salience -200 // Ensure that property has chance to become true by other means.
  when    
  	$p : PropertyEvent(satisfied == PropertyEvent.NONFALSE, $scope : scopeEvent)
  	$scopeEvent : PropertyEvent(closeEvent != null)  	
  then
  	System.out.println("prop " + $p.getProperty());
  	System.out.println("type " + DroolsHelper.getPropertyNamePart($p.getProperty(),DroolsHelper.PROPERTY_TYPE));
  	System.out.println("name " + DroolsHelper.getPropertyNamePart($p.getProperty(),DroolsHelper.PROPERTY_NAME));  	
  	System.out.println("package " + DroolsHelper.getPropertyNamePart($p.getProperty(),DroolsHelper.PROPERTY_PACKAGE));
  	String attributeValue = DroolsHelper.getRuleMetaAttributeValue(kcontext,"org.eeat.api.model","p@talx.model.TransportToolkit.betweenEventually_between1","negate");	
    if (attributeValue != null && attributeValue.equals("true")) {
  		$p.setSatisfied(PropertyEvent.TRUE);
  	}
  	else {
  		$p.setSatisfied(PropertyEvent.FALSE);
  	}	
end
*/
/*


query maxTimeStampQuery
  Number( $maxTimeStamp : longValue ) from accumulate(
    $event : Event($ts : timestamp), max($ts))
end
*/
